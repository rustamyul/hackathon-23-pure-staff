openapi: 3.0.3
info:
  title: PureStaff
  description: |-
    This is a sample API based on the OpenAPI 3.0 specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: vladimir.konstantinov@simbirsoft.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: staff
    description: Operations about staff
paths:
  /:
    get:
      tags:
        - start
      summary: get start index.html
      responses:
        '200':
          description: A Index.html file
          content:
            text/html:
              schema:
                type: string
                format: binary
                example: '<!doctype html><html><head><title>webpage!</title></head><body><p>This.</p></body></html>'
        '400':
          description: Invalid
        '404':
          description: User not found
  /staff:
    get:
      tags:
        - staff
      summary: get staff list (offset, limit)
      operationId: getStafList
      parameters:
        - name: limit
          in: query
          description: 'Amount staff'
          required: false
          schema:
            type: integer
            example: 1
        - name : offset
          in: query
          description: 'offset staff'
          required: false
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/StaffListResp'
        '400':
          description: Invalid
        '404':
          description: User not found
    put:
      tags:
        - staff
      summary: ONLY insert NEW staff
      operationId: insertStaff
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaffReq'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaffResp'
        '400':
          description: Invalid
  /staff/{staff_id}:
    delete:
      tags:
        - staff
      summary: delete Staff
      operationId: deleteStaff
      parameters:
        - name: staff_id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int32
            example: 12
      responses:
        '200':
          description: Success
        '403':
          description: access to the requested resource is forbidden
        '404':
          description: Staff_id not found
  /vacancy:
    get:
      tags:
        - vacancy
      summary: get vacancy
      description: ''
      operationId: getVacancyList
      parameters:
        - name: limit
          in: query
          description: 'Amount need vacancy'
          required: true
          schema:
            type: integer
            example: 1
        - name : offset
          in: query
          required: true
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/VacancyListResp'
        '400':
          description: Invalid
        '404':
          description: Vacancy not found
    put:
      tags:
        - vacancy
      summary: insert new vacancy or update exist
      description: This can only be done by the logged in user.
      operationId: updateVacancy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VacancyReq'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VacancyResp'
        '400':
          description: Invalid
  /vacancy/{vacancy_id}:
    delete:
      tags:
        - vacancy
      summary: Delete vacancy
      description: This can only be done by the logged in user.
      operationId: deleteVacancy
      parameters:
        - name: vacancy_id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: integer
            format: int32
            example: 12
      responses:
        '200':
          description: Success
        '400':
          description: Invalid vacancy_id
        '404':
          description: vacancy_id not found
components:
  schemas:
    CreateStaffRequest:
      type: object
      properties:
        name:
          type: string
          example: Bob
        specialization:
          type: string
          example: Backend, Frontend
        aboutMe:
          type: string
          example: Hi, i'm excelent boy; Free to work
        photo:
          type: string
          description: 'The path to the alredy uploaded image'
          example: mnt/staff/{id}/1.jpg
    CreateStaffResponse:
      type: object
      properties:
        name:
          type: string
          example: Bob
        specialization:
          type: string
          example: Backend, Frontend
        aboutMe:
          type: string
          example: Hi, i'm excelent boy; Free to work
        photo:
          type: string
          description: 'The path to the alredy uploaded image'
          example: mnt/staff/{id}/1.jpg
        staff_id:
          type: string
          example: 64ee562b4606600ca8d6c752
        rating:
          type: number
          format: double
          example: 5.0
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/staff/64ee562b4606600ca8d6c752
            staff:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/staff/64ee562b4606600ca8d6c752
    GetStaffListResponse:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            staff:
              type: array
              items:
                $ref: '#/components/schemas/CreateStaffResponse'
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/staff?page=0&size=20
            profile:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/profile/staff
        page:
          type: object
          properties:
            size:
              type: integer
              format: int32
              example: 2
            totalElements:
              type: integer
              format: int32
              example: 2
            totalPages:
              type: integer
              format: int32
              example: 1
            number:
              type: integer
              format: int32
              example: 0
    CreateVacancyRequest:
      type: object
      properties:
        company_name:
          type: string
          example: Intel
        photo:
          type: string
          description: 'The path to the alredy uploaded image'
          example: mnt/staff/{id}/1.jpg
        job_title:
          type: string
          example: Need senior BackEnd developer
        specialization:
          type: string
          example: BackEnd
        requirements:
          type: array
          items:
            type: string
          example: ["Java 11", "Spring", "Docker"]
        pay_fork:
          type: integer
          format: int32
          example: 100000
    CreateVacancyResponse:
      type: object
      properties:
        company_name:
          type: string
          example: Intel
        photo:
          type: string
          description: 'The path to the alredy uploaded image'
          example: mnt/staff/{id}/1.jpg
        job_title:
          type: string
          example: Need senior BackEnd developer
        specialization:
          type: string
          example: BackEnd
        requirements:
          type: array
          items:
            type: string
          example: ["Java 11", "Spring", "Docker"]
        pay_fork:
          type: integer
          format: int32
          example: 100000
        vacancy_id:
          type: string
          example: 64ee562b4606600ca8d6c752
        rating:
          type: number
          format: double
          example: 5.0
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/vacancy/64ee562b4606600ca8d6c752
            vacancy:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/vacancy/64ee562b4606600ca8d6c752
    GetVacancyListResponce:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            vacancy:
              type: array
              items:
                $ref: '#/components/schemas/CreateVacancyResponse'
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/vacancy?page=0&size=20
            profile:
              type: object
              properties:
                href:
                  type: string
                  example: http://localhost:8080/profile/vacancy
        page:
          type: object
          properties:
            size:
              type: integer
              format: int32
              example: 2
            totalElements:
              type: integer
              format: int32
              example: 2
            totalPages:
              type: integer
              format: int32
              example: 1
            number:
              type: integer
              format: int32
              example: 0